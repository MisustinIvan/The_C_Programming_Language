#include<stdio.h>
#include<stdlib.h>
#include<complex.h>
#include<SDL2/SDL.h>

#define SIZEOFARR(arr) (int)(sizeof(arr)/sizeof(arr[0]))

#define WIDHT 1200
#define HEIGHT 800


#define MAX_ITER 100

int mandelbrot[HEIGHT][WIDHT];

int scale = 400;

int RightOffset = 800;
int UpOffset = 400;

int point(complex double c) {
    complex double z = 0 + 0*I;


    for(int i = 0; i<MAX_ITER; i++) {
        z = z * z + c;
    }

    if (cabs(z) <= 2) { return 1; }
    return 0;
}

void fillMandelbrot() {
    for(double i = 0; i<HEIGHT; i++) {
        for(double j = 0; j<WIDHT; j++) {
            complex double c = (j-RightOffset)/scale + ((i-UpOffset)*I)/scale;
            int value = point(c);
            mandelbrot[(int)i][(int)j] = value;
        }
    }
}

void writeToFile() {
    FILE *file = fopen("./output", "w");
    if (file == NULL) {
        printf("ah shit");
    }

    for(int i = 0; i<HEIGHT; i++) {
        for(int j = 0; j<WIDHT; j++) {
            if (mandelbrot[i][j] == 1) {
                fprintf(file ,"███");
            } else {
                fprintf(file ,"   ");
            }
        }
        fprintf(file, "\n");
    }
    fclose(file);
}

int main(int argv, char *argc[]) {

    fillMandelbrot();
    writeToFile();

    SDL_Window *window = NULL;
    SDL_Renderer *renderer = NULL;

    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't initialize SDL: %s", SDL_GetError());
        return 1;
    }

    window = SDL_CreateWindow("Mandelbrot set", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDHT, HEIGHT, SDL_WINDOW_SHOWN);
    if (!window) {
        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't create window: %s", SDL_GetError());
        SDL_Quit();
        return 1;
    }


    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (!renderer) {
        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, "Couldn't create renderer: %s", SDL_GetError());
        SDL_DestroyWindow(window);
        SDL_Quit();
        return 1;
    }
    
    const Uint8* keyboard = SDL_GetKeyboardState(NULL);

    while(1) {
        SDL_PumpEvents();
        
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        if(keyboard[SDLK_RETURN]) scale-=150;


        if(keyboard[SDL_SCANCODE_O]) scale-=150;
        if(keyboard[SDL_SCANCODE_P]) scale+=150;

        if(keyboard[SDL_SCANCODE_Q]) RightOffset+=100;
        if(keyboard[SDL_SCANCODE_W]) RightOffset+=100;

        if(keyboard[SDL_SCANCODE_A]) UpOffset+=40;
        if(keyboard[SDL_SCANCODE_S]) UpOffset+=40;

        fillMandelbrot(); 


        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        for(int i = 0; i<HEIGHT; i++) {
            for(int j = 0; j<WIDHT; j++) {
                if (mandelbrot[i][j] == 1) {
                    SDL_RenderDrawPoint(renderer, j, i);
                }
            }
        }

        SDL_RenderPresent(renderer);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
